diff --git a/arch/arm/include/asm/arch-stm32h7/stm32.h b/arch/arm/include/asm/arch-stm32h7/stm32.h
index 2b0a670008..d36831dba5 100644
--- a/arch/arm/include/asm/arch-stm32h7/stm32.h
+++ b/arch/arm/include/asm/arch-stm32h7/stm32.h
@@ -17,4 +17,22 @@
  * arch/arm/include/asm/arch-stm32f4/stm32.h
  * arch/arm/include/asm/arch-stm32f7/stm32.h
  */
+
+#define STM32_PERIPH_BASE	0x40000000UL
+
+#define STM32_APB4_PERIPH_BASE	0x58000000UL
+#define STM32_APB2_PERIPH_BASE	(STM32_PERIPH_BASE + 0x00010000)
+#define STM32_AHB1_PERIPH_BASE	(STM32_PERIPH_BASE + 0x00020000)
+
+#define STM32_SYSCFG_BASE	(STM32_APB4_PERIPH_BASE + 0x00000400)
+#define STM32_FLASH_CNTL_BASE	(STM32_AHB1_PERIPH_BASE + 0x3C00)
+
+void stm32_flash_latency_cfg(int latency);
+
+static const u32 sect_sz_kb[CONFIG_SYS_MAX_FLASH_SECT] = {
+	[0 ... 3] =	32 * 1024,
+	[4] =		128 * 1024,
+	[5 ... 7] =	256 * 1024
+};
+
 #endif /* _ASM_ARCH_HARDWARE_H */
diff --git a/arch/arm/include/asm/arch-stm32h7/stm32_pwr.h b/arch/arm/include/asm/arch-stm32h7/stm32_pwr.h
new file mode 100644
index 0000000000..5cd6553d04
--- /dev/null
+++ b/arch/arm/include/asm/arch-stm32h7/stm32_pwr.h
@@ -0,0 +1,29 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * Copyright (C) 2017, STMicroelectronics - All Rights Reserved
+ * Author(s): Patrice Chotard, <patrice.chotard@foss.st.com> for STMicroelectronics.
+ */
+
+#ifndef __STM32_PWR_H_
+#define __STM32_PWR_H_
+
+#ifndef __ASSEMBLY__
+#include <linux/bitops.h>
+#endif
+
+/*
+ * Offsets of some PWR registers
+ */
+#define PWR_CR1_ODEN			BIT(16)
+#define PWR_CR1_ODSWEN			BIT(17)
+#define PWR_CSR1_ODRDY			BIT(16)
+#define PWR_CSR1_ODSWRDY		BIT(17)
+
+struct stm32_pwr_regs {
+	u32 cr1;   /* power control register 1 */
+	u32 csr1;  /* power control/status register 2 */
+	u32 cr2;   /* power control register 2 */
+	u32 csr2;  /* power control/status register 2 */
+};
+
+#endif /* __STM32_PWR_H_ */
diff --git a/arch/arm/include/asm/arch-stm32h7/syscfg.h b/arch/arm/include/asm/arch-stm32h7/syscfg.h
new file mode 100644
index 0000000000..985ae2544d
--- /dev/null
+++ b/arch/arm/include/asm/arch-stm32h7/syscfg.h
@@ -0,0 +1,32 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * (C) Copyright 2016
+ * Michael Kurz, michi.kurz@gmail.com.
+ */
+
+#ifndef _STM32_SYSCFG_H
+#define _STM32_SYSCFG_H
+
+#ifndef __ASSEMBLY__
+#include <linux/bitops.h>
+#endif
+
+struct stm32_syscfg_regs {
+	u32 memrmp;
+	u32 pmc;
+	u32 exticr1;
+	u32 exticr2;
+	u32 exticr3;
+	u32 exticr4;
+	u32 cmpcr;
+};
+
+/*
+ * SYSCFG registers base
+ */
+#define STM32_SYSCFG		((struct stm32_syscfg_regs *)STM32_SYSCFG_BASE)
+
+/* SYSCFG peripheral mode configuration register */
+#define SYSCFG_PMC_MII_RMII_SEL	BIT(23)
+
+#endif
diff --git a/board/st/stm32h743-disco/stm32h743-disco.c b/board/st/stm32h743-disco/stm32h743-disco.c
index 4091d5f9fd..5f428b48d4 100644
--- a/board/st/stm32h743-disco/stm32h743-disco.c
+++ b/board/st/stm32h743-disco/stm32h743-disco.c
@@ -7,8 +7,24 @@
 #include <common.h>
 #include <dm.h>
 #include <init.h>
+#include <lcd.h>
 #include <log.h>
+#include <miiphy.h>
+#include <phy_interface.h>
+#include <ram.h>
+#include <serial.h>
+#include <spl.h>
+#include <splash.h>
+#include <st_logo_data.h>
+#include <video.h>
 #include <asm/global_data.h>
+#include <asm/io.h>
+#include <asm/armv7m.h>
+#include <asm/arch/stm32.h>
+#include <asm/arch/gpio.h>
+#include <asm/arch/syscfg.h>
+#include <asm/gpio.h>
+#include <linux/delay.h>
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -44,5 +60,52 @@ u32 get_board_rev(void)
 int board_init(void)
 {
 	gd->bd->bi_boot_params = gd->bd->bi_dram[0].start + 0x100;
+
+	return 0;
+}
+
+int board_late_init(void)
+{
+	struct gpio_desc gpio = {};
+	int node;
+
+	node = fdt_node_offset_by_compatible(gd->fdt_blob, 0, "st,led1");
+	if (node < 0)
+		return -1;
+
+	gpio_request_by_name_nodev(offset_to_ofnode(node), "led-gpio", 0, &gpio,
+				   GPIOD_IS_OUT);
+
+	if (dm_gpio_is_valid(&gpio)) {
+		dm_gpio_set_value(&gpio, 0);
+		mdelay(500);
+		dm_gpio_set_value(&gpio, 1);
+		mdelay(500);
+		dm_gpio_set_value(&gpio, 0);
+		mdelay(500);
+		dm_gpio_set_value(&gpio, 1);
+	}
+
+	/* read button 1*/
+	node = fdt_node_offset_by_compatible(gd->fdt_blob, 0, "st,button1");
+	if (node < 0)
+		return -1;
+
+	gpio_request_by_name_nodev(offset_to_ofnode(node), "button-gpio", 0,
+				   &gpio, GPIOD_IS_IN);
+
+	if (!dm_gpio_get_value(&gpio)){
+		env_set("button", "HIGH");
+		puts("-------------\n-");
+		puts("usr button is at HIGH LEVEL (pressed)\n");
+	} else {
+		env_set("button", "LOW");
+		puts("-------------\n-");
+		puts("usr button is at LOW LEVEL (released)\n");
+	} 	
+	puts("~ Usage : Released -> boot XIP from SPI flash\n");
+	puts("          Pressed -> update DTB and kernel in SPI flash from TFTP\n");
+	puts("-------------\n-");
+
 	return 0;
 }
diff --git a/include/configs/stm32h743-disco.h b/include/configs/stm32h743-disco.h
index 6e10dbdfe9..32deb4df67 100644
--- a/include/configs/stm32h743-disco.h
+++ b/include/configs/stm32h743-disco.h
@@ -22,6 +22,11 @@
 #define CONFIG_SYS_LOAD_ADDR		0xD0400000
 #define CONFIG_LOADADDR			0xD0400000
 
+#define CONFIG_SYS_MAX_FLASH_SECT	8
+#define CONFIG_SYS_MAX_FLASH_BANKS	1
+
+#define CONFIG_STM32_FLASH
+
 #define CONFIG_SYS_HZ_CLOCK		1000000
 
 #define CONFIG_CMDLINE_TAG
@@ -32,17 +37,60 @@
 #define CONFIG_SYS_MAXARGS		16
 #define CONFIG_SYS_MALLOC_LEN		(1 * 1024 * 1024)
 
+
 #define BOOT_TARGET_DEVICES(func) \
 	func(MMC, mmc, 0)
 
 #include <config_distro_bootcmd.h>
 #define CONFIG_EXTRA_ENV_SETTINGS				\
-			"kernel_addr_r=0xD0008000\0"		\
-			"fdtfile=stm32h743i-disco.dtb\0"	\
-			"fdt_addr_r=0xD0408000\0"		\
-			"scriptaddr=0xD0418000\0"		\
-			"pxefile_addr_r=0xD0428000\0" \
-			"ramdisk_addr_r=0xD0438000\0"		\
-			BOOTENV
+			"pxefile_addr_r=0xD0008000\0" \
+			"ipaddr=192.168.0.10\0" \
+			"serverip=192.168.0.4\0" \
+			"bootargs_ramfs=console=ttySTM0,115200,earlyprintk consoleblank=0 loglevel=6\0" \
+			"bootargs_jffs2=console=ttySTM0,115200,earlyprintk consoleblank=0 loglevel=6 root=/dev/mtdblock1 rw rootfstype=jffs2\0" \
+			"bootargs_xip=console=ttySTM0,115200,earlyprintk consoleblank=0 loglevel=6 root=mtd:rootfs rootfstype=cramfs\0" \
+			"bootargs_xip_cramfs=console=ttySTM0,115200,earlyprintk consoleblank=0 loglevel=7 noinitrd root=/dev/null rootflags=physaddr=0x90810000 rootfstype=cramfs\0" \
+			"dtb_file=stm32h743/stm32h743i-disco.dtb\0" \
+			"kernel_xip_file=stm32h743/uxipImage\0" \
+			"kernel_file=stm32h743/uImage\0" \
+			"rootfs_file=stm32h743/rootfs.jffs2\0" \
+			"test_file=stm32h743/test.txt\0" \
+			"fdt_sf_mapped_addr_r=0x90000000\0" \
+			"kernel_sf_mapped_addr_r=0x90010000\0" \
+			"fdt_ram_addr_r=0xD0000000\0" \
+			"kernel_ram_addr_r=0xD0010000\0" \
+			"tmp_ram_addr_r=0xD0000000\0" \
+			"dtb_sf_offset=0x0\0" \
+			"max_dtb_sf_size=0x10000\0" \
+			"kernel_sf_offset=0x10000\0" \
+			"max_kernel_sf_size=0x7E0000\0" \
+			"rootfs_sf_offset=0x810000\0" \
+			"max_rootfs_sf_size=0x600000\0" \
+			"dtb_header_sf_offset=0xE10000\0" \
+			"kernel_header_sf_offset=0xE11000\0" \
+			"rootfs_header_sf_offset=0xE12000\0" \
+			"cmd_get_dtb_sf_size=sf read ${tmp_ram_addr_r} ${dtb_header_sf_offset} 4 && setenvram.k dtb_sf_size ${tmp_ram_addr_r}\0" \
+			"cmd_get_kernel_sf_size=sf read ${tmp_ram_addr_r} ${kernel_header_sf_offset} 4 && setenvram.k kernel_sf_size ${tmp_ram_addr_r}\0" \
+			"cmd_get_rootfs_sf_size=sf read ${tmp_ram_addr_r} ${rootfs_header_sf_offset} 4 && setenvram.k rootfs_sf_size ${tmp_ram_addr_r}\0" \
+			"cmd_update_dtb_size_in_sf=mw.l ${tmp_ram_addr_r} ${filesize} 1 && sf update ${tmp_ram_addr_r} ${dtb_header_sf_offset} 4\0" \
+			"cmd_update_kernel_size_in_sf=mw.l ${tmp_ram_addr_r} ${filesize} 1 && sf update ${tmp_ram_addr_r} ${kernel_header_sf_offset} 4\0" \
+			"cmd_update_rootfs_size_in_sf=mw.l ${tmp_ram_addr_r} ${filesize} 1 && sf write ${tmp_ram_addr_r} ${rootfs_header_sf_offset} 4\0" \
+			"cmd_update_dtb_from_tftp=tftp ${tmp_ram_addr_r} ${dtb_file} && sf update ${tmp_ram_addr_r} ${dtb_sf_offset} ${filesize} && run cmd_update_dtb_size_in_sf\0" \
+			"cmd_update_kernel_from_tftp=tftp ${tmp_ram_addr_r} ${kernel_file} && sf update ${tmp_ram_addr_r} ${kernel_sf_offset} ${filesize} && run cmd_update_kernel_size_in_sf\0" \
+			"cmd_update_kernel_xip_from_tftp=tftp ${tmp_ram_addr_r} ${kernel_xip_file} && sf update ${tmp_ram_addr_r} ${kernel_sf_offset} ${filesize} && run cmd_update_kernel_size_in_sf\0" \
+			"cmd_update_rootfs_from_tftp=tftp ${tmp_ram_addr_r} ${rootfs_file} && sf update ${tmp_ram_addr_r} ${rootfs_sf_offset} ${filesize} && run cmd_update_rootfs_size_in_sf\0" \
+			"cmd_probe_spi=sf probe\0" \
+			"cmd_spi_dummy_read=sf read ${tmp_ram_addr_r} 0x0 1\0" \
+			"cmd_load_dtb_to_ram=run cmd_get_dtb_sf_size && sf read ${fdt_ram_addr_r} ${dtb_sf_offset} ${dtb_sf_size}\0" \
+			"cmd_load_kernel_to_ram=run cmd_get_kernel_sf_size && sf read ${kernel_ram_addr_r} ${kernel_sf_offset} ${kernel_sf_size}\0" \
+			"netboot=setenv bootargs ${bootargs_ramfs} && echo ""Booting from TFTP"" && tftp ${fdt_ram_addr_r} ${dtb_file} && tftp ${kernel_ram_addr_r} ${kernel_file} && bootm ${kernel_ram_addr_r} - ${fdt_ram_addr_r}\0" \
+			"spibootxip=setenv bootargs ${bootargs_xip} && echo ""Booting from SPI flash XIP mode"" && run cmd_probe_spi && run cmd_spi_dummy_read && bootm ${kernel_sf_mapped_addr_r} - ${fdt_sf_mapped_addr_r}\0" \
+			"spibootram=setenv bootargs ${bootargs_jffs2} && echo ""Loading and booting uImage from SPI flash to RAM"" && run cmd_probe_spi && run cmd_load_kernel_to_ram && run cmd_load_dtb_to_ram && bootm ${kernel_ram_addr_r} - ${fdt_ram_addr_r}\0" \
+			"updatespixip=echo ""Updating SPI flash from TFTP (XIP)"" && run cmd_probe_spi && run cmd_update_dtb_from_tftp && run cmd_update_kernel_xip_from_tftp && run cmd_update_rootfs_from_tftp\0" \
+			"updatespiram=echo ""Updating SPI flash from TFTP (RAM)"" && run cmd_probe_spi && run cmd_update_dtb_from_tftp && run cmd_update_kernel_from_tftp && run cmd_update_rootfs_from_tftp\0" \
+			"conditionalbootxip=if test \"${button}\" = \"LOW\"; then run spibootxip; fi; run updatespixip\0" \
+			"conditionalbootram=if test \"${button}\" = \"LOW\"; then run spibootram; fi; run updatespiram\0" \
+			"testtftp=echo ""Testing TFTP transfert"" && mw.w ${tmp_ram_addr_r} 0xFFFF 20 && md.w ${tmp_ram_addr_r} 20 && tftp ${tmp_ram_addr_r} ${test_file} && md.w ${tmp_ram_addr_r} 20\0" \
+ 			BOOTENV
 
 #endif /* __CONFIG_H */
